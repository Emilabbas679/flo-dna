"""empty message

Revision ID: be005f32797d
Revises: 
Create Date: 2020-04-19 20:23:19.682914

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils
import uuid

# revision identifiers, used by Alembic.
revision = 'be005f32797d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('attributes',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('description', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='attribute_status'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('car_makes',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('key', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('categories',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('parent_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('description', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_description', sa.String(), nullable=True),
    sa.Column('meta_keyword', sa.String(), nullable=True),
    sa.Column('top', sa.Boolean(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='default_statuses'), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('color',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('contacts',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('subject', sa.String(), nullable=True),
    sa.Column('message', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('countries',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='default_statuses'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('customer',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('first_name', sa.String(length=30), nullable=True),
    sa.Column('last_name', sa.String(length=50), nullable=True),
    sa.Column('email', sa.String(length=50), nullable=False),
    sa.Column('profile_image', sa.String(), nullable=True),
    sa.Column('gender', sa.Boolean(), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('password', sa.String(length=128), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('customer_sms',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('phone_number', sa.String(length=13), nullable=True),
    sa.Column('code', sa.String(length=6), nullable=True),
    sa.Column('is_checked', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('driver_types',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.Column('icon', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('entity_emails',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('entity_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('default', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('entity_phones',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('entity_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('entity_type', postgresql.ENUM('customer', 'receiver', name='entity_types'), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('phone_type', postgresql.ENUM('whatsapp', 'telegram', 'viber', name='phone_types'), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('default', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('help_categories',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='help_category_status'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('home_boxes',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='box_status'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('languages',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='default_statuses'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('media',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('entity_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('entity_key', sa.String(), nullable=True),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('file_name', sa.String(), nullable=True),
    sa.Column('content_type', sa.String(), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('page',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('title', sa.JSON(), nullable=True),
    sa.Column('slug', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('sub_title', sa.JSON(), nullable=True),
    sa.Column('content', sa.JSON(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('payment_type',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('label', sa.String(), nullable=True),
    sa.Column('payment_details', sa.String(), nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='payment_statuses'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_types',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('description', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='product_type_status'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('registration',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('step', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('stores',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('company_name', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('address_ltd', sa.String(), nullable=True),
    sa.Column('address_details', sa.String(), nullable=True),
    sa.Column('address_lng', sa.String(), nullable=True),
    sa.Column('about', sa.String(), nullable=True),
    sa.Column('delivery_area', sa.String(), nullable=True),
    sa.Column('password', sqlalchemy_utils.types.password.PasswordType(), nullable=False),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='store_status'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('tags',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('description', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_description', sa.String(), nullable=True),
    sa.Column('meta_keyword', sa.String(), nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='default_statuses'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('addresses',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('address_name', sa.String(), nullable=True),
    sa.Column('full_address', sa.String(), nullable=True),
    sa.Column('address_details', sa.String(), nullable=True),
    sa.Column('lat', sa.String(), nullable=True),
    sa.Column('lng', sa.String(), nullable=True),
    sa.Column('customer_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('session_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('advance_payments',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=True),
    sa.Column('payment_type_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('status', postgresql.ENUM('payed', 'pending', 'cancelled', name='order_payment_status'), nullable=True),
    sa.Column('payment_details', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['payment_type_id'], ['payment_type.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('attribute_values',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('attribute_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='attribute_value_status'), nullable=False),
    sa.ForeignKeyConstraint(['attribute_id'], ['attributes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('car_models',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('make_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('make_key', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['make_id'], ['car_makes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('category_tags',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('category_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('tag_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('country_languages',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('country_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('language_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], ),
    sa.ForeignKeyConstraint(['language_id'], ['languages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('customer_address',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('customer_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('type', postgresql.ENUM('home', 'work', name='address_type'), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('full_address', sa.String(), nullable=True),
    sa.Column('lat', sa.String(), nullable=True),
    sa.Column('lng', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('drivers',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=False),
    sa.Column('email', sqlalchemy_utils.types.email.EmailType(length=255), nullable=False),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('type_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.ForeignKeyConstraint(['type_id'], ['driver_types.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('phone_number'),
    sa.UniqueConstraint('username')
    )
    op.create_table('help_articles',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('category_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='help_status'), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['help_categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('home_box_tags',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('box_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('tag_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.ForeignKeyConstraint(['box_id'], ['home_boxes.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('landing_pages',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('slug', sa.String(), nullable=True),
    sa.Column('meta_keyword', sa.String(), nullable=True),
    sa.Column('meta_description', sa.String(), nullable=True),
    sa.Column('meta_title', sa.String(), nullable=True),
    sa.Column('h1', sa.String(), nullable=True),
    sa.Column('content', sa.String(), nullable=True),
    sa.Column('country_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('language_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='default_statuses'), nullable=True),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], ),
    sa.ForeignKeyConstraint(['language_id'], ['languages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('order',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('customer_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('session_id', sa.String(), nullable=True),
    sa.Column('payment_type_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('order_status', postgresql.ENUM('pending', 'accepted', 'ongoing', 'rejected', 'done', name='order_status'), nullable=True),
    sa.Column('total_price', sa.Float(), nullable=True),
    sa.Column('discounted_price', sa.Float(), nullable=True),
    sa.Column('bill_price', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ),
    sa.ForeignKeyConstraint(['payment_type_id'], ['payment_type.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('products',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_type_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('sku', sa.String(), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['product_type_id'], ['product_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('car_trims',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('model_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('key', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['car_models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cart',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('customer_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('session_id', sa.String(), nullable=True),
    sa.Column('total_items', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('driver_deposit',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('driver_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('amount', sa.Float(precision=10), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('driver_documents',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('driver_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('document_type', postgresql.ENUM('profile_picture', 'driver_license', 'insurance', 'registration_certificate', 'voen_page_1', 'voen_page_2', name='document_types'), nullable=False),
    sa.Column('verified', sa.Boolean(), nullable=False),
    sa.Column('media_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['media_id'], ['media.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('home_box_landings',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('box_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('landing_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.ForeignKeyConstraint(['box_id'], ['home_boxes.id'], ),
    sa.ForeignKeyConstraint(['landing_id'], ['landing_pages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('landing_tags',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('landing_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('tag_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.ForeignKeyConstraint(['landing_id'], ['landing_pages.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('order_payments',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('order_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('payment_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', postgresql.ENUM('payed', 'pending', 'cancelled', name='order_payment_statuses'), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_attribute_priority',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('attribute_value_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['attribute_value_id'], ['attribute_values.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_attributes',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('attribute_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.ForeignKeyConstraint(['attribute_id'], ['attributes.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_cart_priority',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_countries',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('country_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('country_code', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_couriers',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('country_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('country_code', sa.String(), nullable=True),
    sa.Column('courier_type', postgresql.ENUM('free', 'paid', name='courier_types'), nullable=True),
    sa.Column('courier_price', sa.Float(), nullable=True),
    sa.Column('status', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_extra_priority',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('extra_product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['extra_product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_extra_tags',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('tag_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('extra_tag_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('extra_product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.ForeignKeyConstraint(['extra_product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['extra_tag_id'], ['tags.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_landing_priority',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('landing_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['landing_id'], ['landing_pages.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_media',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('entity_key', sa.String(), nullable=True),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('file_name', sa.String(), nullable=True),
    sa.Column('content_type', sa.String(), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_related_priority',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('related_product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['related_product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_similar_priority',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('similar_product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['similar_product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_tag_priority',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('tag_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_tags',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('tag_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_wish_list_priority',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('receivers',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('order_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('customer_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('session_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('wish_list',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('customer_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('session_id', sa.String(), nullable=True),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('driver_cars',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('make_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('model_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('trim_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('driver_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('car_number', sa.String(length=9), nullable=True),
    sa.Column('color_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.ForeignKeyConstraint(['color_id'], ['color.id'], ),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['make_id'], ['car_makes.id'], ),
    sa.ForeignKeyConstraint(['model_id'], ['car_models.id'], ),
    sa.ForeignKeyConstraint(['trim_id'], ['car_trims.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_attribute_values',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_attribute_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('attribute_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('attribute_value_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.ForeignKeyConstraint(['attribute_id'], ['attributes.id'], ),
    sa.ForeignKeyConstraint(['attribute_value_id'], ['attribute_values.id'], ),
    sa.ForeignKeyConstraint(['product_attribute_id'], ['product_attributes.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_details',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_country_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('country_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('country_code', sa.String(), nullable=True),
    sa.Column('price', sa.Float(), nullable=True),
    sa.Column('discount_price', sa.Float(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='product_status'), nullable=True),
    sa.Column('name', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('description', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], ),
    sa.ForeignKeyConstraint(['product_country_id'], ['product_countries.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('receiver_address_priority',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('address_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('receiver_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.ForeignKeyConstraint(['address_id'], ['addresses.id'], ),
    sa.ForeignKeyConstraint(['receiver_id'], ['receivers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sub_order',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('order_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('total_price', sa.Float(), nullable=True),
    sa.Column('receiver_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('address_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=True),
    sa.Column('delivery_type', postgresql.ENUM('fast', 'scheduled', name='delivery_typess'), nullable=True),
    sa.Column('delivery_date', sa.DateTime(), nullable=True),
    sa.Column('delivery_time', sa.String(), nullable=True),
    sa.Column('message', sa.String(), nullable=True),
    sa.Column('order_status', postgresql.ENUM('pending', 'ongoing', 'done', name='sub_order_status'), nullable=True),
    sa.Column('is_cart', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['addresses.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ),
    sa.ForeignKeyConstraint(['receiver_id'], ['receivers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('extra_order',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('suborder_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('product_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('track_key', sa.String(), nullable=True),
    sa.Column('product_price', sa.Float(), nullable=True),
    sa.Column('courier_price', sa.Float(), nullable=True),
    sa.Column('country_code', sa.String(), nullable=True),
    sa.Column('total_items', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['suborder_id'], ['sub_order.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('store_offers',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('sub_order_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('store_id', sqlalchemy_utils.types.uuid.UUIDType(), default=uuid.uuid4, nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('delivery_price', sa.Float(), nullable=False),
    sa.Column('message', sa.String(), nullable=True),
    sa.Column('picked', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.ForeignKeyConstraint(['sub_order_id'], ['sub_order.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('store_offers')
    op.drop_table('extra_order')
    op.drop_table('sub_order')
    op.drop_table('receiver_address_priority')
    op.drop_table('product_details')
    op.drop_table('product_attribute_values')
    op.drop_table('driver_cars')
    op.drop_table('wish_list')
    op.drop_table('receivers')
    op.drop_table('product_wish_list_priority')
    op.drop_table('product_tags')
    op.drop_table('product_tag_priority')
    op.drop_table('product_similar_priority')
    op.drop_table('product_related_priority')
    op.drop_table('product_media')
    op.drop_table('product_landing_priority')
    op.drop_table('product_extra_tags')
    op.drop_table('product_extra_priority')
    op.drop_table('product_couriers')
    op.drop_table('product_countries')
    op.drop_table('product_cart_priority')
    op.drop_table('product_attributes')
    op.drop_table('product_attribute_priority')
    op.drop_table('order_payments')
    op.drop_table('landing_tags')
    op.drop_table('home_box_landings')
    op.drop_table('driver_documents')
    op.drop_table('driver_deposit')
    op.drop_table('cart')
    op.drop_table('car_trims')
    op.drop_table('products')
    op.drop_table('order')
    op.drop_table('landing_pages')
    op.drop_table('home_box_tags')
    op.drop_table('help_articles')
    op.drop_table('drivers')
    op.drop_table('customer_address')
    op.drop_table('country_languages')
    op.drop_table('category_tags')
    op.drop_table('car_models')
    op.drop_table('attribute_values')
    op.drop_table('advance_payments')
    op.drop_table('addresses')
    op.drop_table('tags')
    op.drop_table('stores')
    op.drop_table('registration')
    op.drop_table('product_types')
    op.drop_table('payment_type')
    op.drop_table('page')
    op.drop_table('media')
    op.drop_table('languages')
    op.drop_table('home_boxes')
    op.drop_table('help_categories')
    op.drop_table('entity_phones')
    op.drop_table('entity_emails')
    op.drop_table('driver_types')
    op.drop_table('customer_sms')
    op.drop_table('customer')
    op.drop_table('countries')
    op.drop_table('contacts')
    op.drop_table('color')
    op.drop_table('categories')
    op.drop_table('car_makes')
    op.drop_table('attributes')
    # ### end Alembic commands ###
